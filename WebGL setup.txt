// WebGL setup
const canvas = document.getElementById('glCanvas');
const gl = canvas.getContext('webgl');

if (!gl) {
    alert('WebGL not supported, falling back on experimental-webgl');
    gl = canvas.getContext('experimental-webgl');
}

// Vertex Shader
const vertexShaderSource = `
    attribute vec2 a_position;
    void main() {
        gl_Position = vec4(a_position, 0.0, 1.0);
    }
`;

// Fragment Shader
const fragmentShaderSource = `
    precision mediump float;
    void main() {
        gl_FragColor = vec4(0.0, 0.0, 0.0, 1.0);
    }
`;

// Compile shader function
function compileShader(type, source) {
    const shader = gl.createShader(type);
    gl.shaderSource(shader, source);
    gl.compileShader(shader);
    if (!gl.getShaderParameter(shader, gl.COMPILE_STATUS)) {
        console.error('Shader compile failed: ', gl.getShaderInfoLog(shader));
        gl.deleteShader(shader);
        return null;
    }
    return shader;
}

const vertexShader = compileShader(gl.VERTEX_SHADER, vertexShaderSource);
const fragmentShader = compileShader(gl.FRAGMENT_SHADER, fragmentShaderSource);

// Link shaders into a program
const program = gl.createProgram();
gl.attachShader(program, vertexShader);
gl.attachShader(program, fragmentShader);
gl.linkProgram(program);

if (!gl.getProgramParameter(program, gl.LINK_STATUS)) {
    console.error('Program link failed: ', gl.getProgramInfoLog(program));
}

gl.useProgram(program);

// Set up vertex attribute
const positionLocation = gl.getAttribLocation(program, 'a_position');
const positionBuffer = gl.createBuffer();
gl.bindBuffer(gl.ARRAY_BUFFER, positionBuffer);

// Enable the attribute and specify how to pull out data from buffer
gl.enableVertexAttribArray(positionLocation);
gl.vertexAttribPointer(positionLocation, 2, gl.FLOAT, false, 0, 0);

// Koch-like mountains recursive subdivision
function generateKochMountains(points, depth) {
    if (depth === 0) {
        return points;
    }

    const newPoints = [];
    for (let i = 0; i < points.length - 1; i++) {
        const [x1, y1] = points[i];
        const [x2, y2] = points[i + 1];

        // Divide into three parts
        const dx = x2 - x1;
        const dy = y2 - y1;
        const dist = Math.sqrt(dx * dx + dy * dy);
        const angle = Math.atan2(dy, dx);

        // Calculate the new points
        const p1 = [x1, y1];
        const p2 = [x1 + dx / 3, y1 + dy / 3];
        const p4 = [x1 + 2 * dx / 3, y1 + 2 * dy / 3];
        const p5 = [x2, y2];

        // Calculate the middle peak (using 30-60-90 triangle properties)
        const peakHeight = dist / 3 * Math.sin(Math.PI / 3);
        const p3 = [
            (p2[0] + p4[0]) / 2 + peakHeight * Math.cos(angle + Math.PI / 2),
            (p2[1] + p4[1]) / 2 + peakHeight * Math.sin(angle + Math.PI / 2)
        ];

        newPoints.push(p1, p2, p3, p4);
    }
    newPoints.push(points[points.length - 1]);

    return generateKochMountains(newPoints, depth - 1);
}

// Function to render the Koch mountains
function render(depth) {
    const points = [[-0.9, -0.5], [0.9, -0.5]];
    const kochPoints = generateKochMountains(points, depth);

    // Flatten the points array
    const flatPoints = kochPoints.flat();

    // Upload the vertices to the buffer
    gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(flatPoints), gl.STATIC_DRAW);

    // Clear the canvas and draw
    gl.clear(gl.COLOR_BUFFER_BIT);
    gl.drawArrays(gl.LINE_STRIP, 0, kochPoints.length);
}

// Initial rendering
let recursionDepth = 0;
render(recursionDepth);

// Handle slider input
const slider = document.getElementById('recursionSlider');
const depthValue = document.getElementById('depthValue');

slider.addEventListener('input', (event) => {
    recursionDepth = event.target.value;
    depthValue.textContent = recursionDepth;
    render(recursionDepth);
});











var canvas = document.getElementById("gl-canvas");
var gl = canvas.getContext("webgl");

var points = [
	vec2(-0.5,-0.5),
	vec2(0.5, -0.5),
	vec2(0.0, 0.5)
];

void main(){
	gl_Position = 10.0;
}

gl_FragColor = vec4(1.0, 0.0, 0.0, 1.0);